{
  "name": "grunt-version",
  "description": "Grunt task to handle versioning of a project.",
  "version": "0.3.0",
  "homepage": "https://github.com/kswedberg/grunt-version",
  "author": {
    "name": "Karl Swedberg",
    "email": "kswedberg@gmail.com",
    "url": "http://karlswedberg.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kswedberg/grunt-version.git"
  },
  "bugs": {
    "url": "https://github.com/kswedberg/grunt-version/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/kswedberg/grunt-version/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "semver": "~2.0.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-copy": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "keywords": [
    "gruntplugin",
    "version",
    "versioning"
  ],
  "readme": "# grunt-version\n\n[Grunt][grunt] task to handle versioning of a project.\n\n## Getting Started\n_Requires grunt >=0.4.2. If you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide._\n\nFrom the same directory as your project's [Gruntfile][Getting Started] and [package.json][], install this plugin by running the following command:\n\n```bash\nnpm install grunt-version --save-dev\n```\n\nOnce that's done, add this line to your project's Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-version');\n```\n\nIf the plugin has been installed correctly, running `grunt --help` at the command line should list the newly-installed plugin's task. In addition, the plugin should be listed in package.json as a `devDependency`, which ensures that it will be installed whenever the `npm install` command is run.\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n[package.json]: https://npmjs.org/doc/json.html\n\n## The \"version\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `version` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  version: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.pkg\nType: `String|Object`\nDefault value: `'package.json'`\n\nA string representing a package file's path relative to Gruntfile.js, or an object representing a parsed package file.\n\nThis package file is where your \"canonical\" version should be set, in a `\"version\"` property. The `grunt-version` plugin uses that version (either incremented by the `release` option or not) when it updates version info in other files.\n\n\n#### options.prefix\nType: `String`\nDefault value: `'[^\\\\-]version[\\'\"]?\\\\s*[:=]\\\\s*[\\'\"]'`\n\nA string value representing a regular expression to match text preceding the actual version within the file.\n\nIf you're following one of the popular documentation syntaxes in your js files, you might want to set the option like so:\n\n```js\ngrunt.initConfig({\n  version: {\n    somejs: {\n      options: {\n        prefix: '@version\\\\s*'\n      },\n      src: ['js/*.js']\n    },\n  },\n})\n```\n\n\n#### options.release\nType: `String`\nDefault value: `''`\n\nA string value representing one of the **semver 2.x** release types (`'major'`, `'minor'`, `'patch'`, or `'prerelease'`) used to increment the value of the specified package version. See [node-semver](https://github.com/isaacs/node-semver) for more information about release incrementing.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to update the version in `src/testing.js` based on the `version` property set in a `package.json` file located in the same directory as your `Gruntfile.js`. So if the version property in `package.json` is `\"0.1.2\"`, and the `src/testing.js` file has the content `var version = '0';`, that content would change to `var version = '0.1.2';`\n\n```js\ngrunt.initConfig({\n  version: {\n    // options: {},\n    defaults: {\n      src: ['src/testing.js']\n    }\n  }\n})\n```\n\n#### Custom Options\nIn this example, custom options are used.\n\n```js\ngrunt.initConfig({\n  version: {\n    options: {\n      pkg: 'myplugin.jquery.json'\n    },\n    myplugin: {\n      options: {\n        prefix: 'var version\\\\s+=\\\\s+[\\'\"]'\n      },\n      src: ['src/testing.js', 'src/123.js']\n    },\n    myplugin_patch: {\n      options: {\n        release: 'patch'\n      },\n      src: ['myplugin.jquery.json', 'src/testing.js', 'src/123.js'],\n    }\n  }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][].\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-version@0.3.0",
  "_from": "grunt-version@^0.3.0"
}
